# Control files for the warnings and tests-warnings Ant targets
#
# "warnings-check" will fail if anything is flagged; "warnings" will print and continue
# so that a developer can work on several issues at once.
#
# warnings:        java/ecj.warning.options
# warnings-check:  java/ecj.warning.options-ci
#
# The two files should be the same _except_ for warn vs err at start of certain lines
# in the java/ecj.warning.options file; java/ecj.warning.options-ci should be all -err
#
# for compiling the test directory, the java/ecj.warning.options-test
# and the java/ecj.warning.options-test-ci file overrides parts of this

#
# Group (macro) checks - we accept the group, then adjust specific subitems
#
-warn:+hiding
  # 195 cases of members hiding superclass members
-warn:-fieldHiding
  # thousands of places where parameters are named for members
-warn:-localHiding
-warn:+typeHiding

-warn:-allJavadoc
-warn:-javadoc

-warn:+invalidJavadoc
-warn:+invalidJavadocTag
-warn:+invalidJavadocTagDep
-warn:+invalidJavadocTagNotVisible

  # not all of our code has Javadoc comments
-warn:-missingJavadocTags
-warn:+missingJavadocTagsMethod
-warn:+missingJavadocTagsOverriding
-warn:-missingJavadocComments
-warn:-missingJavadocCommentsOverriding

-warn:+static-access
  # This tags Turnout.INCONSISTENT in favor of NamedBean.INCONSISTENT
-warn:-indirectStatic
-warn:+staticReceiver

-err:+unused
  # This tags valid "new jmri.util.WaitHandler(this);" constructs
-err:-unusedAllocation
-err:-unusedImport
-err:+unusedLabel
-err:+unusedLocal
-err:-unusedParam
-err:+unusedParamImplementing
-err:+unusedParamIncludeDoc
-err:+unusedParamOverriding
-err:+unusedPrivate
  # This tags a "throws" clause that's not yet thrown by the specific implementation
-err:-unusedThrown
-err:+unusedThrownIncludeDocComment
-err:+unusedThrownExemptExceptionThrowable
-err:+unusedThrownWhenOverriding
  # 480 cases of the form List<FileMeta> files = new LinkedList<FileMeta>();
-err:-unusedTypeArgs
-err:+unusedTypeParameter
  # cases of the `catch (FooException ex)` and then not using `ex`
-err:-unusedExceptionParam

#
# Individual Checks
#

-warn:+allDeprecation
-warn:+allOver-ann
-warn:+assertIdentifier
-warn:+charConcat
-warn:+conditionAssign
-warn:+constructorName
-warn:+compareIdentical
-warn:+dep-ann
-warn:+deprecation
-warn:+discouraged
-warn:+enumIdentifier
-warn:+enumSwitch
-warn:+fallthrough
-warn:+finalBound
-warn:+finally
-warn:+forbidden
-warn:+hashCode
-warn:+includeAssertNull
-warn:+inheritNullAnnot
-warn:+intfAnnotation
-warn:+intfRedundant
-warn:+intfNonInherited
-warn:+maskedCatchBlocks
-warn:+noEffectAssign
-warn:+nonnullNotRepeated
-warn:+null
-warn:+nullAnnot
-warn:+nullAnnotConflict
-warn:+nullAnnotRedundant
-warn:+nullDereference
-warn:+nullUncheckedConversion
-warn:+over-ann
-warn:+pkgDefaultMethod
-warn:+semicolon
-warn:+specialParamHiding
-warn:+suppress
-warn:+switchDefault
-warn:+unavoidableGenericProblems
-warn:+unchecked
-warn:+uselessTypeCheck
-warn:+varargsCast

#
# Checks we choose not to enforce as our common style
#

  # no real cost to using implicit boxing/unboxing, and it's just easier
-warn:-boxing

  # non-NLS string literals (mostly missing // $ NON-NLS)
-warn:-nls

  # many of these in the code, and "final" for parameters is a matter of style
-warn:-paramAssign

  # JMRI doesn't anticipate use of Java serialization
-warn:-serial

  # maybe a good idea, but too expensive now
-warn:-super

  # many of these aleady in the code, and the value is not clear
-warn:-syntheticAccess

  # we don't require "this." in every variable access to reduce verbosity
-warn:-unqualifiedField
-warn:-unqualified-field-access

  # our APIs routinely have "may need in future" parameters
-warn:-unusedArgument

  # missing enum switch cases even when default case is present; `default` can be convenient,
  # but is a risk if additional members are added to the enum
-warn:-enumSwitchPedantic

  # flags methods that can be made static because they don't access data member
  # but that just seems distracting somehow because then you have to change access
-warn:-all-static-method
-warn:-static-method

  # We often seem to _prefer_ the terminal else instead of bottom return
-warn:-unnecessaryElse


#
# Checks we plan to eventually put in place, but would be burdensome now
#

  # 208 cases; the common "if (debugFlag)" metaphor is flagged by these
-warn:-deadCode
-warn:-allDeadCode

  # missing synch in synchronized method override
  # 24 outstanding items
-warn:-syncOverride

  # raw type instead of parameterized type
  # 9 outstanding items (associated with PickList)
-warn:-raw

  # this tags some NetBeans and FindBugs tokens in @SuppressWarnings
  # Until that's fixed, useful to run occasionally to find "Unnecessary" annotations
-warn:-warningToken

  # 1270 "Empty block should be documented"
-warn:-emptyBlock





