# Control files for the warnings and tests-warnings Ant targets
#
# "warnings-check" will fail if anything is flagged; "warnings" will print and continue
# so that a developer can work on several issues at once.
#
# warnings:        java/ecj.warning.options
# warnings-check:  java/ecj.warning.options-ci
#
# The two files should be the same _except_ for + vs - at start of certain lines
# in the java/ecj.warning.options file
#
# for compiling the test directory, the java/ecj.warning.options-test
# and the java/ecj.warning.options-test-ci file overrides parts of this
#
# For more information, see
#   https://www.ibm.com/docs/en/wdfrhcw/1.4.0?topic=code-using-batch-compiler
#   https://help.eclipse.org/latest/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_batch_compiler.htm&anchor=warn
#

#
# Group (macro) checks - we accept the group, then adjust specific subitems
#
-err:+hiding
  # 195 cases of members hiding superclass members
-err:-fieldHiding
  # thousands of places where parameters are named for members
-err:-localHiding
-err:+maskedCatchBlocks
-err:+typeHiding

-err:-allJavadoc
-err:-javadoc
-err:+invalidJavadoc
-err:+invalidJavadocTag
-err:+invalidJavadocTagDep
-err:+invalidJavadocTagNotVisible
  # not all of our code has Javadoc comments
-err:-missingJavadocTags
-err:+missingJavadocTagsMethod
-err:+missingJavadocTagsOverriding
  # not all of our code has Javadoc comments
-err:-missingJavadocComments
  # not all of our code has Javadoc comments
-err:-missingJavadocCommentsOverriding

-err:+static-access
  # This tags Turnout.INCONSISTENT in favor of NamedBean.INCONSISTENT
-err:-indirectStatic
-err:+staticReceiver

-err:+unused
  # This tags valid "new jmri.util.WaitHandler(this);" constructs
-err:-unusedAllocation
  # cases of the `catch (FooException ex)` and then not using `ex`
-err:-unusedExceptionParam
  # allow unused imports as a convenience
-err:-unusedImport
-err:+unusedLabel
-err:+unusedLocal
  # our APIs routinely have "may need in future" parameters
-err:-unusedParam
-err:+unusedParamImplementing
-err:+unusedParamIncludeDoc
-err:+unusedParamOverriding
-err:+unusedPrivate
  # This tags a "throws" clause that's not yet thrown by the specific implementation
-err:-unusedThrown
-err:+unusedThrownIncludeDocComment
-err:+unusedThrownExemptExceptionThrowable
-err:+unusedThrownWhenOverriding
  # 480 cases of the form List<FileMeta> files = new LinkedList<FileMeta>();
-err:-unusedTypeArgs
-err:+unusedTypeParameter

#
# Individual Checks
#

-err:+allDeprecation
-err:+allOver-ann
-err:+assertIdentifier
-err:+charConcat
-err:+conditionAssign
-err:+constructorName
-err:+compareIdentical
-err:+dep-ann
-err:+deprecation
-err:+discouraged
-err:+enumIdentifier
-err:+enumSwitch
-err:+fallthrough
-err:+finalBound
-err:+finally
-err:+forbidden
-err:+hashCode
-err:+includeAssertNull
-err:+inheritNullAnnot
-err:+intfAnnotation
-err:+intfNonInherited
-err:+intfRedundant
-err:+noEffectAssign
-err:+nonnullNotRepeated
-err:+null
-err:+nullAnnot
-err:+nullAnnotConflict
-err:+nullAnnotRedundant
-err:+nullDereference
-err:+nullUncheckedConversion
-err:+over-ann
-err:+pkgDefaultMethod
-err:+semicolon
-err:+specialParamHiding
-err:+switchDefault
-err:+unavoidableGenericProblems
-err:+unchecked
-err:+uselessTypeCheck
-err:+varargsCast

#
# Checks we choose not to enforce as our common style
#

  # no real cost to using implicit boxing/unboxing, and it's just easier
-err:-boxing

  # non-NLS string literals (mostly missing // $ NON-NLS)
-err:-nls

  # many of these in the code, and "final" for parameters is a matter of style
-err:-paramAssign

  # JMRI doesn't anticipate use of Java serialization
-warn:-serial

  # maybe a good idea, but too expensive now
-err:-super

  # many of these aleady in the code, and the value is not clear
-err:-syntheticAccess

  # we don't require "this." in every variable access to reduce verbosity
-err:-unqualifiedField
-err:-unqualified-field-access

  # our APIs routinely have "may need in future" parameters
-err:-unusedArgument

  # missing enum switch cases even when default case is present; `default` can be convenient,
  # but is a risk if additional members are added to the enum
-err:-enumSwitchPedantic

  # flags methods that can be made static because they don't access data member
  # but that just seems distracting somehow because then you have to change access
-err:-all-static-method
-err:-static-method

  # We often seem to _prefer_ the terminal else instead of bottom return
-err:-unnecessaryElse

#
# Checks we plan to eventually put in place, but would be burdensome now
#

  # 211 cases; the common "if (debugFlag)" metaphor is flagged by these
-err:-allDeadCode
-err:+deadCode

  # missing synch in synchronized method override
  # 24 outstanding items
-err:-syncOverride

  # raw type instead of parameterized type
  # 9 outstanding items (associated with PickList)
-warn:-raw

  # 1270 "Empty block should be documented"
-err:-emptyBlock

  # 291 cases of "Potential Resource Leak: '<unassigned Closeable value>' may not be closed"
-err:-resource



  # this tags some NetBeans and FindBugs tokens in @SuppressWarnings
  # Until that's fixed, useful to run occasionally to find "Unnecessary" annotations
-warn:-warningToken
  # occasionally turn off @SuppressWarnings to see if there are occurrences to fix
  #   Currently 370 cases
-err:+suppress



