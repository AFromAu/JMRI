package jmri.util;

import java.io.*;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.jsoup.*;
import org.jsoup.nodes.*;
import org.junit.jupiter.api.*;

/**
 * Generates the search index for local help files.
 * 
 * @author Daniel Bergqvist Copyright (C) 2021
 */
public class GenerateSearchIndexTest {

    private final Map<Integer, String> _fileIndex = new HashMap<>();
    private final Map<Integer, Map<String, Set<Integer>>> _searchIndex = new HashMap<>();
    private int _currentFileId = 0;
    
    
    private void addWord(String word, int fileId) {
        if (word.length() < 3) return;
        
        for (int i=3; i <= word.length(); i++) {
            Map<String, Set<Integer>> wordMap = _searchIndex.get(i);
            if (wordMap == null) {
                wordMap = new HashMap<>();
                _searchIndex.put(i, wordMap);
            }
            String part = word.substring(0, i);
            Set<Integer> fileIdList = wordMap.get(part);
            if (fileIdList == null) {
                fileIdList = new HashSet<>();
                wordMap.put(part, fileIdList);
            }
            fileIdList.add(fileId);
        }
    }
    
    private void parseNode(Node node, String pad) {
        for (Node child : node.childNodes()) {
//            System.out.format("%s%s, %s%n", pad, child.nodeName(), child.getClass().getName());
            if (child instanceof TextNode) {
                TextNode textNode = (TextNode)child;
                String text = textNode.getWholeText().toLowerCase();
                String[] parts = text.split("\\W+");
                for (String s : parts) {
                    addWord(s, _currentFileId);
                }
//                System.out.format("%sText: %s%n", pad, text.getWholeText());
//                System.out.println(text.getWholeText().trim());
            }
            parseNode(child, pad+"    ");
        }
    }
    
    private void searchFolder(String folder) throws IOException {
        Path path = FileSystems.getDefault().getPath(folder);
        Set<String> files = Stream.of(path.toFile().listFiles())
                  .filter(file -> !file.isDirectory())
                  .map(File::getName)
                  .collect(Collectors.toSet());
        
        for (String file : files) {
            if (file.endsWith(".shtml")) {
                String fileName = folder + file;
                _fileIndex.put(_currentFileId, fileName);
                Path filePath = FileSystems.getDefault().getPath(fileName);
                Document doc = Jsoup.parse(filePath.toFile(), "UTF-8");
//                Document doc = Jsoup.parse(html);
                Element body = doc.body();
                parseNode(body, "");
                _currentFileId++;
//                System.out.format("%n============================================================%n%n");
            }
        }
        
        Set<String> folders = Stream.of(path.toFile().listFiles())
                  .filter(file -> file.isDirectory())
                  .map(File::getName)
                  .collect(Collectors.toSet());
        
        for (String aFolder : folders) {
            searchFolder(folder + aFolder + "/");
        }
        
    }
    
    private void createHtmlFile() throws IOException {
        String newLine = System.getProperty("line.separator");
        FileWriter fileWriter = new FileWriter(FileUtil.getProgramPath() + "help/en/local/search.html");
        PrintWriter printWriter = new PrintWriter(fileWriter);
//        printWriter.println("<!DOCTYPE html>");
//        printWriter.println("<html lang=\"en\">");
        printWriter.print(
"<!DOCTYPE html>" + newLine +
"<html lang=\"en\">" + newLine +
"<!-- This file is generated by jmri.web.servlet.help.BuildHelpIndexTest using help/en/JmriHelp_enIndex.xml -->" + newLine +
"<head>" + newLine +
"  <meta charset=\"utf-8\" />" + newLine +
"  <script type=\"text/javascript\" src=\"search.json\"></script>" + newLine +
"  <script>" + newLine +
"    function openLink(link) {" + newLine +
"      document.getElementById(\"page\").src = link;" + newLine +
"    }" + newLine +
"    function onLoad() {" + newLine +
"      const obj = JSON.parse(searchIndex);\n" + newLine +
"      alert(\"Hej\");" + newLine +
"//      var url = window.location.href;" + newLine +
"//      var i = url.indexOf('?');" + newLine +
"//      var urlParts = [url.slice(0,i), url.slice(i+1)];" + newLine +
"//      if (urlParts[1] != \"\")" + newLine +
"//      {" + newLine +
"//        var subUrlParts = urlParts[1].split(\"=\");" + newLine +
"//        openLink(subUrlParts[1]);" + newLine +
"//      }" + newLine +
"    }" + newLine +
"  </script>" + newLine +
"  <style>" + newLine +
".float-container {" + newLine +
"    border: 3px solid #fff;" + newLine +
"    padding: 20px;" + newLine +
"}" + newLine +
"" + newLine +
".float-child-index {" + newLine +
"    width: 30%;" + newLine +
"    float: left;" + newLine +
"    padding: 20px;" + newLine +
"    border: 2px solid black;" + newLine +
"}" + newLine +
".float-child-page {" + newLine +
"    width: 60%;" + newLine +
"    float: left;" + newLine +
"    padding: 20px;" + newLine +
"    border: 2px solid black;" + newLine +
"}" + newLine +
"  </style>" + newLine +
"</head>" + newLine +
"<body onload=\"onLoad()\">" + newLine +
"<div class=\"float-container\">" + newLine +
"<div class=\"float-child-index\">" + newLine +
"</div>" + newLine +
"<iframe class=\"float-child-page\" id=\"page\" height=\"800px\" src=\"file:///F:/Projekt/Java/GitHub/JMRI/help/en/index.shtml\" title=\"JMRI Help\"></iframe>" + newLine +
// "<iframe class=\"float-child-page\" id=\"page\" height=\"800px\" src=\"file:///F:/Projekt/Java/GitHub/JMRI/help/en/html/tools/logixng/LogixNG.shtml\" title=\"LogixNG\"></iframe>" + newLine +
"</body>" + newLine +
"</html>" + newLine
);
        printWriter.println("</html>");
        printWriter.close();
    }
    
    private void createJsonFile() throws IOException {
//        String newLine = System.getProperty("line.separator");
        FileWriter fileWriter = new FileWriter(FileUtil.getProgramPath() + "help/en/local/search.json");
        PrintWriter printWriter = new PrintWriter(fileWriter);
//        printWriter.println("<!DOCTYPE html>");
//        printWriter.println("<html lang=\"en\">");
//        printWriter.println("{files:[");
        printWriter.print("let searchIndex = '{");
        printWriter.print("\"files\":{");
        for (Map.Entry<Integer, String> entry : _fileIndex.entrySet()) {
            printWriter.format("\"%d\":\"%s\",", entry.getKey(), entry.getValue());
        }
        printWriter.print("\"-1\":\"\"");  // Dummy data since we have a comma character after each data
        printWriter.print("},");
        
        printWriter.print("\"words\":{");
        for (Map.Entry<Integer, Map<String, Set<Integer>>> searchIndexEntry : _searchIndex.entrySet()) {
            printWriter.format("\"%d\":{", searchIndexEntry.getKey());
            for (Map.Entry<String, Set<Integer>> wordMapEntry : searchIndexEntry.getValue().entrySet()) {
                printWriter.format("\"%s\":[", wordMapEntry.getKey());
                for (int fileId : wordMapEntry.getValue()) {
//                    System.out.format("%5d: %20s, %s%n", wordMap.getKey(), fileIdList.getKey(), _fileIndex.get(fileId));
                    printWriter.format("\"%d\",", fileId);
                }
                printWriter.print("\"-1\"");  // Dummy data since we have a comma character after each data
                printWriter.print("],");
            }
            printWriter.print("\"\":\"\"");  // Dummy data since we have a comma character after each data
            printWriter.print("},");
        }
        printWriter.print("\"-1\":\"\"");  // Dummy data since we have a comma character after each data
        printWriter.print("}");

        printWriter.print("}';");
        printWriter.close();
    }
    
    @Test
    public void testGenerateSearchIndex() throws IOException {
        searchFolder("help/en/");
        
        int count = 0;
        for (Map.Entry<Integer, Map<String, Set<Integer>>> wordMap : _searchIndex.entrySet()) {
            for (Map.Entry<String, Set<Integer>> fileIdList : wordMap.getValue().entrySet()) {
                for (int fileId : fileIdList.getValue()) {
//                    System.out.format("%5d: %20s, %s%n", wordMap.getKey(), fileIdList.getKey(), _fileIndex.get(fileId));
                    count++;
                }
            }
        }
        
        System.out.format("Word count: %d%n", count);
        
        createHtmlFile();
        createJsonFile();
        
//        String html = "<html><head><title>First parse</title></head>"
//                + "<body><p>Parsed HTML into a doc.</p></body></html>";
//        Document doc = Jsoup.parse(html);
//        Element body = doc.body();
//        parseNode(body, "");
    }

    @BeforeEach
    public void setUp() {
        JUnitUtil.setUp();
    }

    @AfterEach
    public void tearDown() {
        JUnitUtil.tearDown();
    }

    // private final static Logger log = LoggerFactory.getLogger(GenerateSearchIndexTest.class);

}
