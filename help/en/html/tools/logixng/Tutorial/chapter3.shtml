<!DOCTYPE html>
<html lang="en">

<head>
  <title>LogixNG Tutorial - Chapter 3</title>
  <meta name="author" content="Daniel Bergqvist">
  <meta name="author" content="Dave Sand">
  <meta name="keywords" content="jmri LogixNG tutorial basic actions expressions">

  <!--#include virtual="/Style.shtml" -->

</head>

<body>
  <!--#include virtual="/Header.shtml" -->

  <div id="mBody">

    <div id="mainContent" class="no-sidebar">
      <h1>LogixNG Tutorial - Chapter 3</h1>

      <h2>Basic Actions and Expressions</h2>

      <p>When an Action or Expression is to be added to the ConditionalNG tree, an item
      has to be selected.  The selection window has a <strong>Category</strong> list and
      a <strong>Type</strong> list which varies based on the category selection.  JMRI
      objects, such as sensors, turnouts, etc., are in the <strong>Item</strong> category.
      These are handled in separate chapters.</p>

      <h2>Actions</h2>
        <h3>Common</h3>

          <div style="margin-left: 2em">
          <a href="images/chapter3/action_common.png">
          <img src="images/chapter3/action_common.png"
          alt="Chapter 3 common action" width="275" height="237">
          </a>
          </div>

          <dl>
            <dt>Execute delayed</dt>

            <dd>Delay the execution of the following action for a specified amount of time.
            This is the same as the Logix <strong>Delayed Set ...</strong>.  The main
            difference is that this can be used with any action, such as signals.  The
            time delay units are milliseconds, seconds, minutes and hours.

            <div style="margin-left: 2em">
            <a href="images/chapter3/execute_delay.png">
            <img src="images/chapter3/execute_delay.png"
            alt="Chapter 3 execute_delay" width="535" height="329">
            </a>
            </div>
            <dd>

            <dt>For</dt>
            <dd>
              For is a for-loop. It has four children.
              <ul>
                <li><strong>Init</strong> - this action is executed only one time. It's
                used to initialize the loop, for example setting a Memory to a particular
                value.</li>

                <li><strong>While</strong> - this expression decides if the loop
                should run one lap more. The loop will continue to run until this
                condition will be <strong>false</strong>.</li>

                <li><strong>AfterEach</strong> - this action is executed at the end of the
                loop. It can for example be used to increment a counter in a Memory.</li>

                <li><strong>Do</strong> - this action is executed in each loop. It
                does the main work.</li>
              </ul>

              <p>When For is executed, the Init action is run once. After that, the
              Condition expression is evaluated. If the condition returns <strong>true</strong>,
              the Do action is executed and at last the AfterEach action is executed. Then
              the process is repeated, except that the Init action is only executed once.</p>
            </dd>

            <dt>If Then Else</dt>
            <dd>Reads a digital child expression and if the answer is <strong>true</strong>
            it executes the <strong>then</strong> child action, else it executes the
            <strong>else</strong> child action.</dd>

            <dt>Many</dt>
            <dd>The Many action executes many child actions.</dd>

            <dt>Read analog and set analog</dt>
            <dd>Read an analog child expression and execute an analog child action.</dd>

            <dt>Read string and set string</dt>
            <dd>Read a string child expression and execute a string child action.</dd>

            <dt>Sequence</dt>
            <dd>-- pending --</dd>

            <dt>Table: For each</dt>
            <dd>-- pending --</dd>

            <dt>Timer</dt>
            <dd>The Timer action executes a child action after some time.</dd>

          </dl>

        <h3>Display</h3>

          <div style="margin-left: 2em">
          <a href="images/chapter3/action_display.png">
          <img src="images/chapter3/action_display.png"
          alt="Chapter 3 display action" width="260" height="132">
          </a>
          </div>

          <dl>
            <dt>Icon/Label on panel</dt>
            <dd>Disable/Enable/Hide/Show an icon or label on a specific panel.</dd>
          </dl>

        <h3>LocoNet</h3>

          <div style="margin-left: 2em">
          <a href="images/chapter3/action_loconet.png">
          <img src="images/chapter3/action_loconet.png"
          alt="Chapter 3 loconet action" width="260" height="131">
          </a>
          </div>

          <dl>
            <dt>Clear loconet slots</dt>
            <dd>-- pending --</dd>

            <dt>Update loconet slots</dt>
            <dd>-- pending --</dd>

          </dl>

        <h3>Other</h3>

          <div style="margin-left: 2em">
          <a href="images/chapter3/action_other.png">
          <img src="images/chapter3/action_other.png"
          alt="Chapter 3 other action" width="261" height="179">
          </a>
          </div>

          <dl>
            <dt>Call module</dt>
            <dd>-- pending --</dd>

            <dt>Listen on beans</dt>
            <dd>-- pending --</dd>

            <dt>Log local variables</dt>
            <dd>-- pending --</dd>

            <dt>Logix</dt>
            <dd>LogixNG has an action called Logix that emulates how JMRI Logix works.
            The action Logix has one expression and a number of boolean actions. A
            boolean action is an action that takes a boolean value (true/false) and then
            decides what to do. The action Logix was added mainly to support import of
            JMRI Logix to LogixNG.</dd>

            <dt>Shutdown</dt>
            <dd>The ShutdownComputer action either shutdown or restarts the computer.
            This action is mainly included to demonstrate the possibilities of LogixNG,
            but it may be useful in some cases, for example when a Raspberry Pi computer
            runs the layout and there is no keyboard and mouse connected to the Raspberry
            Pi computer. It's then possible to use a sensor to shutdown the computer.</dd>

            <dt>Web browser</dt>
            <dd>-- pending --</dd>

          </dl>


      <h2>Expressions</h2>

        <p>In Logix, the user can select between three different ways to combine the
        variables in the Conditional. And, Or and Antecedent. In LogixNG, these three are
        expressions that can have other expressions as children.</p>

        <h3>Common</h3>

          <div style="margin-left: 2em">
          <a href="images/chapter3/expression_common.png">
          <img src="images/chapter3/expression_common.png"
          alt="Chapter 3 common expression" width="208" height="166">
          </a>
          </div>

          <dl>
            <dt>And</dt>
              <dd>And evaluates the child expressions and if all of them returns true, the
              And expression returns true as well.</dd>

            <dt>Antecedent</dt>
              <dd>The Antecedent expression is mainly included to make import from Logix
              to LogixNG simple. It works exactly as Antecedent in Logix. It has a number
              of child expressions and an antecedent that defines how the evaluation of the
              expressions should be done. Each child expression is referenced in the
              antecedent by R1, R2, R3, ..., there R1 is the first child expression, R2 is
              the second child expression, and so on. Note that this differs from other
              expressions in LogixNG, other LogixNG expressions uses the socket name,
              but since the Antecedent expression is included to work as Antecedent works
              in Logix, the antecedent has been kept from Logix Antecedent as well.
              <em>Note: Antecedent is included for compability with Logix but it's
              recommended to use Formula instead. Formula is much more powerful, uses the
              socket names and also works with numbers and strings.</em></dd>

            <dt>Digital Formula</dt>
              <dd>Formula is the next generation of Antecedent. It supports many operators,
              like ==, !=, &lt;=, >=, &lt;, >, +, -, *, / and %. It
              supports local variables, memories and functions. It supports all the types
              of expressions, digital, analog and string expressions.</dd>

            <dt>Not</dt>
              <dd>The Not expression has one child expression and answers <strong>true</strong>
              if the child  expression answers <strong>false</strong>, and <strong>false</strong>
              if the child expression answers <strong>true</strong>.</dd>

            <dt>Or</dt>
              <dd>Or evaluates the child expressions and if at least one of them returns
              true, the Or expression returns true as well.</dd>

          </dl>

        <h3>LocoNet</h3>

          <div style="margin-left: 2em">
          <a href="images/chapter3/expression_loconet.png">
          <img src="images/chapter3/expression_loconet.png"
          alt="Chapter 3 loconet expression" width="213" height="130">
          </a>
          </div>

          <dl>
            <dt>Slot Usage</dt>
            <dd>Evaluate the LocoNet slot usage.

            <div style="margin-left: 2em">
            <a href="images/chapter3/loconet_slot_usage.png">
            <img src="images/chapter3/loconet_slot_usage.png"
            alt="Chapter 3 loconet slot usage" width="962" height="505">
            </a>
            </div>
            </dd>
          </dl>

        <h3>Other</h3>

          <div style="margin-left: 2em">
          <a href="images/chapter3/expression_other.png">
          <img src="images/chapter3/expression_other.png"
          alt="Chapter 3 other expression" width="297" height="183">
          </a>
          </div>

          <dl>
            <dt>Always false</dt>
            <dd>The False expression always answers <strong>false</strong>.</dd>

            <dt>Always true</dt>
            <dd>The True expression always answers <strong>true</strong>.</dd>

            <dt>Call module</dt>
            <dd>Call a module and and return its true/false response.
            See <a href="chapter10.shtml">Chapter 10 - Modules</a></dd>

            <dt>Hold</dt>
            <dd>The Hold expression has two child expressions, one trigger expression and
            one hold expression. For this expression to become <strong>true</strong>, both
            the trigger expression and the hold expression must answer <strong>true</strong>.
            But then it stays <strong>true</strong> as long as the hold expression stays
            <strong>true</strong>.</dd>

            <dt>Last result of digital expression</dt>
            <dd>-- pending --</dd>

            <dt>Trigger once</dt>
            <dd>The TriggerOnce expression answers <strong>true</strong> one single
            time and then <strong>false</strong> until JMRI is restarted. It's
            designed to be used when something needs to be done exactly one time,
            for example set some turnouts to a specified inital state or to set
            some memories to some predefined values.</dd>

          </dl>

      <hr>
      <p><a href="index.shtml">Return to the Tutorial TOC</a>
      <span style="padding-left: 6em"><a href="chapter4.shtml">Chapter 4 - Working with sockets</a></span></p>

      <!--#include virtual="/Footer.shtml" -->
    </div><!-- closes #mainContent-->

  </div><!-- closes #mBody-->
  <script src="/js/main.js"></script>



</body>
</html>
