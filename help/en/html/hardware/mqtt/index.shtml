<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI Hardware Support - MQTT</title>
  <!--#include virtual="/Style.shtml" -->
</head>

<body>
  <!--#include virtual="/Header.shtml" -->
  <div id="mBody">
    <!--#include virtual="../SidebarUp.shtml" -->
    <div id="mainContent">

      <h1>Hardware Support: MQTT</h1>
      <img src="images/mqtt-logo.png" align="center">
      
      <p>Devices both on and off the layout can use the <a href="https://en.wikipedia.org/wiki/MQTT" target="_blank">MQTT protocol</a>
      to connect to JMRI. As of release 4.21.2, JMRI implements MQTT-connected turnouts, sensors, and lights with more objects expected
      to implemented in the future. For other objects and devices off the layout, you can use a provided <a href="#scripting"> script </a>
      or write your own using JMRI's MQTT Adapter object and methods.  This also allows communicating with 
      <a href="https://en.wikipedia.org/wiki/Internet_of_things" target="_blank">IOT devices</a> as well as
      <a href="../arduino/index.shtml">arduinos</a> and other microcontrollers.
      </p>
      
      <p><a href="https://mqtt.org" target="_blank">MQTT </a>is a "client-server publish-subscribe" protocol, meaning that JMRI connects
      to a MQTT server and subscribes to receive messages on certain topics.  JMRI also publishes messages to the MQTT server
      and any device subscribed to that topic will receive a copy.  This approach makes it relatively easy for the model railroader
      to use MQTT communication to develop any number of layout control and automation scenarios.
      </p>

      <a name="connecting" id="connecting"></a>
      <h2>Connecting</h2>
      
      You tell JMRI how to connect to your MQTT
      hardware via the Connections pane in the Preferences window.
      Select "MQTT" as the manufacturer name.
      
      <p>
      Currently, JMRI can handle only one MQTT connection at a time.
      You can combine that MQTT connection with other connection types,
      but two MQTT connections won't work properly. This 
      may be improved at some later point if people find a 
      reason to need two MQTT connections.
      
      <h2>Layout Objects</h2>

         <a name= "limitations" id="limitations"></a>
         <h3>Available Objects</h3>
      
         <p>
         Older versions of JMRI (4.12 and earlier) only support Turnouts.  Sensors and Lights were added in 4.15.5.  Support for 
         Reporters is expected to be added in 4.22.
         </p>
      
        <h3>Naming</h3>

        <p>
        Layout objects such as turnouts, sensors, and lights must be identified to JMRI as being connected via MQTT. To identify such
        devices, JMRI objects are created with a <a href="../../doc/Technical/Names.shtml"> system name </a> prefix of "M" (this default
        prefix letter can be changed if desired on the connection preferences page).  The following character will be automatically assigned
        as "T", "S", or "L" as appropriate.  The remainder of the name does not have to follow any particular model.  For example, 
        JMRI MQTT Turnouts are specified with JMRI system names like "MTabcd".
        </p>

        <h3>Topics</h3>
        
        <p>
        <span class="since">Since JMRI 4.15.5</span>
        JMRI publishes and receives messages on specific <a href="images/MQTT_Preferences rel4-21-2.png">
        <img src="images/MQTT_Preferences rel4-21-2.png" align="right" height="278" width="278">
        MQTT "topics".</a>  The topic is formed by concatenating the "MQTT channel," the general MQTT topic for the type
        of object (and in some cases whether publishing/send or subscribing/receive), and the object's system name suffix.
        </p>
        
        <p>
        Using the defaults in the JMRI Connection preferences pane (shown in the picture to the right), the MQTT topic for a Turnout is constructed
        by concatenating "/trains/" with "track/turnout/" and the system name suffix.  For example, a JMRI Turnout with system name "MTabcd" will 
        publish and subscribe to the topic "/trains/track/turnout/abcd". There are two parts to that: A base topic common to everything JMRI does on
        that connection, and a type-specific topic specific to each type.
        </p>
        
        <p>
        You can change the base topic by 
        going to the JMRI Connection preferences,
        selecting your MQTT connection's preference
        pane, checking the "Additional Connection Settings" box,
        and then entering the desired value in the "MQTT channel"
        selection box.<br>
        You then must 
        save your changes and restart JMRI; the program
        won't continue to operate normally after changing the base prefix
        until you restart it.
        </p>
        
        <p>
        Note that the default value of "/trains/" is the default for all JMRI instances.  If you use a common broker (like the http://test.mosquitto.org 
        test server mentioned below) keeping that default prefix will show you traffic from every other JMRI instance anywhere in the world connected to 
        that broker.  You should change that default, usually to something based on your own railroad name. Current guidance is to not have a leading slash;
        it is present in the JMRI default for historical reasons.
        </p>
        
        <p>You can change the type-specific part of the prepended string using the other fields in the preferences.  There are separate fields
        for specifying what JMRI should publish (the "send" field) and what JMRI should subscribe to (recognize back from the layout, the "receive" field).
        You can also use a "wild card" of "{0}" within the string which will put the object's system name suffix at that place.  This allows you to do 
        do things like enter "track/turnout/{0}/state" as the object topic to get "track/turnout/abc/state" as the specific topic for MTabc.
        </p>
        
        <p note>
        Be sure to save the preferences (hit the "Save" button on the Preferences list pane) and restart JMRI to put changes into effect.
        </p>
        
        <p>
        You can also change the object-specific part of the prepended string using
        <a href="#scripting">a script </a>at startup time. 
        
      <a id="payload" name="payload"></a>
      <h2>Message Content</h2>
        <h3>Turnouts</h3>
            By default, the message content for turnouts is
            "CLOSED" and "THROWN".
        <h3>Sensors</h3>
            By default, the message content for sensors is
            "ACTIVE" and "INACTIVE".
        <h3>Changing the Coding</h3>
        <span class="since">Since JMRI 4.15.5</span>
            You can use
            <a href="../../tools/scripting/index.shtml">scripting</a>
            to install a new 
            <a href="https://jmri.org/JavaDoc/doc/jmri/jmrix/mqtt/MqttContentParser.html">jmri.jmrix.mqtt.MqttContentParser</a>
            object to code and decode the content of messages.
            You might want to use JSON format, or need to adapt to specific messages from 
            some already-existing devise; you can create a custom parser to do any of that.
            See the 
            <a href="/jython/SetMqttParser.py">jython/SetMqttParser.py</a>
            sample script for how to do that.
            For a Java example, see the
            <a href="https://github.com/JMRI/JMRI/blob/master/java/src/jmri/jmrix/mqtt/MqttTurnout.java#L24">inner
            class implementation in MqttTurnout</a>.
            <p>
            Note that you can call
            <code>setParser(...)</code>
            on the
            <a href="https://jmri.org/JavaDoc/doc/jmri/jmrix/mqtt/MqttTurnoutManager.html">jmri.jmrix.mqtt.MqttTurnoutManager</a>
            or on an individual
            <a href="https://jmri.org/JavaDoc/doc/jmri/jmrix/mqtt/MqttTurnout.html">jmri.jmrix.mqtt.MqttTurnout</a>
            object.  If you call it on an individual 
            MqttTurnout, that's the only one that's affected.
            If you call it on the MqttTurnoutManager
            all <u>later created</u> 
            MqttTurnout objects will use the new parser; earlier-created ones
            will not be changed.  This means you should 
            call a script to change this before loading any panel files
            if you want all MqttTurnouts to be modified.
    

    <a id="scripting" name="scripting"></a>
    <h2>Scripting</h2>

        <p>
        SendMqttMessage.py
        </p>
        
        <p>
        ReceiveMqttMessage.py
        </p>
        
        <p>
        The sample script <a href="/jython/SetMqttPrefix.py">SetMqttPrefix.py</a> shows how to set object-specific topic components
        at JMRI startup. Note that any changes should be made at startup time before creating any Turnout objects, i.e. the script must be
        run before any panel files are loaded. Changing the prefix only affects Turnouts that are created after the change.
        </p>
        
        <p>
        SetMqttParser.py
        </p>
        
        <p>
        SetMqttOptions.py
        </p>
    
    <h2>Debugging</h2>

      <a id="testserver" name="testserver"></a>
      <a href="http://test.mosquitto.org">
        <img src="https://mosquitto.org/stickers/mosquitto-mono.png" height="80" width="80" align="right"></a>
      If you don't have an MQTT system, and want to play with this connection type, 
      you can enter "test.mosquitto.org" for the host name
      to use a publicly-available (non-JMRI) test server. 
      For more information on this server, see the 
      <a href="http://test.mosquitto.org">test.mosquitto.org</a>
      web page.
      <p>
      If you install the 
      <a href="https://mosquitto.org/download/">mosquitto tools</a>
      on your machine,
      you can use a command like
<pre>
    mosquitto_sub -h test.mosquitto.org -v -t '/trains/#'
</pre>

    to subscribe and print JMRI turnout info as it's published. 
    To publish a change for JMRI to pick up:

<pre>
    mosquitto_pub -h test.mosquitto.org -t /trains/track/turnout/123 -r -m "CLOSED"
    mosquitto_pub -h test.mosquitto.org -t /trains/track/turnout/123 -r -m "THROWN"
</pre>

These commands can be run on the same machine as JMRI, or on a separate machine.
<p>
There are also MQTT tools available for 
<a href="https://www.google.com/search?q=apple+app+store+mqtt&amp;oq=apple+app+store+mqtt">iOS devices</a> and 
<a href="https://play.google.com/store/search?q=mqtt&amp;c=apps&amp;authuser">Android devices</a>
that can be useful for monitoring, testing and operating your layout.

      <!--#include virtual="/Footer.shtml" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
